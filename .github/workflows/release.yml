name: Release OCI Image

on:
  push:
    branches:
      - 'main'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # needed to create release
      issues: write # needed to create release
      pull-requests: write # needed to create release
    outputs:
      new_release_published: ${{ steps.semantic.outputs.version != '' }}
      new_release_version: ${{ steps.semantic.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Go Semantic Release
        id: semantic
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image:
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ needs.release.outputs.new_release_version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true

      # - name: Attest Build Provenance
      #   uses: actions/attest-build-provenance@v2
      #   with:
      #     subject-name: "ghcr.io/${{ github.repository }}"
      #     subject-digest: ${{ steps.build-and-push.outputs.digest }}
      #     push-to-registry: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: "ghcr.io/${{ github.repository }}:${{ needs.release.outputs.new_release_version }}"
          format: spdx-json
          output-file: "sbom.spdx.json"

      - name: Sign the container image with Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'

      - name: Sign the container image with Cosign
        run: |
          cosign sign --yes \
            "ghcr.io/${{ github.repository }}@${{ steps.build-and-push.outputs.digest }}"
          cosign attest --yes --type spdxjson \
            --predicate sbom.spdx.json \
            "ghcr.io/${{ github.repository }}@${{ steps.build-and-push.outputs.digest }}"
        env:
          COSIGN_EXPERIMENTAL: "true"